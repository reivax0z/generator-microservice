AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: My-Service-v1-Microservice

Mappings:
  Constants:
    Lambda:
      MyServiceFunctionNameSuffix: "v1-my-service"
    Tags:
      TaggingVersion: "1"
      Application: My-Service-v1
      Service: Identity
      Owner: "https://telstra-raa.slack.com/messages/G6JSSTQTU/"
      DataClassification: Internal
      CostCentre: CIP

Parameters:
  Environment:
    Description: The (logical) environment of this deployment of the My-Service v1 Microservice
    Type: String
    Default: dev
  DeploymentVersion:
    Description: The (built) version of this deployment of the My-Service v1 Microservice
    Type: String
  DeploymentId:
    Description: An identifier that is unique for a given deployment
    Type: String
  DeploymentType:
    Type: String
    Default: AllAtOnce
    AllowedValues:
      - Canary10Percent30Minutes
      - Canary10Percent5Minutes
      - Canary10Percent10Minutes
      - Canary10Percent15Minutes
      - AllAtOnce
    Description: Preference used for deployment, default is AllAtOnce

Resources:
  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      ManagedPolicyArns:
      # This AWS Built-in policy provides permission to write logs in CloudWatch
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"

  MyServiceV1:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: My-Service microservice
      FunctionName:
        !Join
          - "-"
          - - !Ref Environment
            - !FindInMap [Constants, Lambda, MyServiceFunctionNameSuffix]
      Runtime: nodejs8.10
      CodeUri: .
      Handler: dist/index.handler
      AutoPublishAlias: live
      DeploymentPreference:
        Type: !Ref DeploymentType
        Alarms:
          - !Ref MyServiceLoggedErrorsAlarm
      Environment:
        Variables:
          DEPLOYMENT_ID: !Ref DeploymentId
          LOGGER_LEVEL: info
      MemorySize: 256
      Timeout: 300
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub "${Environment}-PrivateSubnetA"
          - Fn::ImportValue: !Sub "${Environment}-PrivateSubnetB"
          - Fn::ImportValue: !Sub "${Environment}-PrivateSubnetC"
        SecurityGroupIds:
          - Fn::ImportValue:
              !Sub "${Environment}-LambdaMicroservicesSecurityGroup"
      Role: !GetAtt LambdaRole.Arn
      Tags:
        Name: !Sub "${AWS::StackName}-MyServiceV1"
        telstra:taggingVersion: !FindInMap [Constants, Tags, TaggingVersion]
        telstra:service: !FindInMap [Constants, Tags, Service]
        telstra:application: !FindInMap [Constants, Tags, Application]
        telstra:application:version: !Ref DeploymentVersion
        telstra:application:deploymentId: !Ref DeploymentId
        telstra:environment: !Ref Environment
        telstra:owner: !FindInMap [Constants, Tags, Owner]
        telstra:dataClassification:
          !FindInMap [Constants, Tags, DataClassification]
        telstra:costCentre: !FindInMap [Constants, Tags, CostCentre]
    DependsOn: "MyServiceLogGroup"

  MyServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${MyServiceV1}"
      RetentionInDays: 14

  MyServiceThrottleAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmActions:
        - Fn::ImportValue: !Sub "${Environment}-AlarmSnsArn"
      AlarmDescription: "Unable to execute lambda due to throttling"
      AlarmName: !Sub "${Environment}-MyService-ThrottleErrorAlarm"
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      Dimensions:
        - Name: "FunctionName"
          Value: !Ref MyServiceV1
      EvaluationPeriods: "1"
      MetricName: "Throttles"
      Namespace: "AWS/Lambda"
      Period: "60"
      Statistic: "Sum"
      Threshold: "1"
      Unit: "Count"

  MyServiceErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmActions:
        - Fn::ImportValue: !Sub "${Environment}-AlarmSnsArn"
      AlarmDescription: "Enters ALARM state because we have received a lamdba error."
      AlarmName: !Sub "${Environment}-MyService-LambdaErrorAlarm"
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      Dimensions:
        - Name: "FunctionName"
          Value: !Ref MyServiceV1
      EvaluationPeriods: "1"
      MetricName: "Errors"
      Namespace: "AWS/Lambda"
      Period: "60"
      Statistic: "Sum"
      Threshold: "1"
      Unit: "Count"
      
  MyServiceLoggedErrors:
    Type: "AWS::Logs::MetricFilter"
    Properties:
      FilterPattern: !Sub '"[deployment-id: ${DeploymentId}] - error:"'
      LogGroupName: !Sub "/aws/lambda/${MyServiceV1}"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: !Sub "${Environment}/${DeploymentId}/errors"
          MetricName: !Sub "${MyServiceV1}-errors"
    DependsOn: "MyServiceLogGroup"

  MyServiceLoggedErrorsZeroValue:
    Type: "AWS::Logs::MetricFilter"
    Properties:
      FilterPattern: ""
      LogGroupName: !Sub "/aws/lambda/${MyServiceV1}"
      MetricTransformations:
        - MetricValue: "0"
          MetricNamespace: !Sub "${Environment}/${DeploymentId}/errors"
          MetricName: !Sub "${MyServiceV1}-errors"
    DependsOn: "MyServiceLogGroup"

  MyServiceLoggedErrorsAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: !Sub "${Environment}-MyService-ErrorsAlarm"
      AlarmDescription: 'Basic error alarm'
      Namespace: !Sub "${Environment}/${DeploymentId}/errors"
      MetricName: !Sub "${MyServiceV1}-errors"
      ActionsEnabled: true
      AlarmActions:
        - Fn::ImportValue: !Sub ${Environment}-AlarmSnsArn
      InsufficientDataActions:
        - Fn::ImportValue: !Sub ${Environment}-AlarmSnsArn
      OKActions:
        - Fn::ImportValue: !Sub ${Environment}-AlarmSnsArn
      ComparisonOperator: 'GreaterThanOrEqualToThreshold'
      Threshold: '1'
      EvaluationPeriods: '1'
      Period: '60' # in seconds
      Statistic: 'Sum'
      TreatMissingData: 'missing' # Possible values are breaching, notBreaching, ignore, missing. Defaults to missing
      Unit: 'None'
