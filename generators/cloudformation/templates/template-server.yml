AWSTemplateFormatVersion: '2010-09-09'
Description: My-Service-v1-Microservice

Mappings:
  Constants:
    Lambda:
      MyServiceFunctionNameSuffix: "v1-my-service"
    Tags:
      TaggingVersion: "1"
      Application: My-Service-v1
      Service: Identity
      Owner: "https://telstra-raa.slack.com/messages/G6JSSTQTU/"
      DataClassification: Internal
      CostCentre: CIP

Parameters:
  Environment:
    Description: The (logical) environment of this deployment of the My-Service v1 Microservice
    Type: String
    Default: dev
  DeploymentVersion:
    Description: The (built) version of this deployment of the My-Service v1 Microservice
    Type: String
  DeploymentId:
    Description: An identifier that is unique for a given deployment
    Type: String
  AmiId:
    Description: AMI Id of the image for the My-Service v1 instances
    Type: "AWS::EC2::Image::Id"
  InstanceType:
    Description: EC2 instance type for the My-Service v1 instances
    Type: String
    Default: t2.medium
  MinimumInstanceCount:
    Description: The minimum number of My-Service v1 instances required in the cluster group
    Type: String
    Default: "2"
  DesiredInstanceCount:
    Description: The number of My-Service v1 instances required in the cluster for the current deployment
    Type: String
    Default: "2"
  MaximumInstanceCount:
    Description: The maximum number of My-Service v1 instances allowable in the cluster group
    Type: String
    Default: "3"
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: "VPC ID for this account"

Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
          - Effect: Allow
            Action:
              - ec2:DescribeInstances
              - ec2:DescribeTags
            Resource: "*"
      Path: /

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref InstanceRole

  InstanceElbIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Ref: Ec2SecurityGroup
      IpProtocol: tcp
      FromPort: "9031"
      ToPort: "9031"
      SourceSecurityGroupId: 
        Ref: ElbSecurityGroup

  InstanceClusteringIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Ref: Ec2SecurityGroup
      IpProtocol: tcp
      FromPort: "7600"
      ToPort: "7600"
      SourceSecurityGroupId: 
        Ref: Ec2SecurityGroup

  InstanceClusteringIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Ref: Ec2SecurityGroup
      IpProtocol: tcp
      FromPort: "7700"
      ToPort: "7700"
      SourceSecurityGroupId: 
        Ref: Ec2SecurityGroup
      
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      AssociatePublicIpAddress: false
      SecurityGroups:
        - Ref: Ec2SecurityGroup
        - Fn::ImportValue: !Sub ${Environment}-BastionSecurityGroup
      IamInstanceProfile: !GetAtt [InstanceProfile, Arn]

      UserData:
        Fn::Base64:
          !Sub
            - |
              #!/bin/bash -eu
              ## TODO
            - RUNTIME_BUCKET:
                Fn::ImportValue: !Sub "${Environment}-RuntimeBucketName"
              SNS_NOTIFY:
                Fn::ImportValue: !Sub "${Environment}-DevOpsNotifications"
              APP_NAME:
                !FindInMap [Constants, Tags, Application]  
        
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 600
      ConnectionSettings:
        IdleTimeout: 600
      CrossZone: true
      Listeners:
        - LoadBalancerPort: "443"
          Protocol: HTTPS
          SSLCertificateId: 
            Fn::ImportValue: !Sub ${Environment}-ACMCertficateARN
          InstancePort: "9031"
          InstanceProtocol: HTTPS
      HealthCheck:
        Target: HTTPS:9031/identity/pf/heartbeat.ping
        Timeout: "10"
        Interval: "15"
        UnhealthyThreshold: "2"
        HealthyThreshold: "2"
      Scheme: internal
      SecurityGroups:
        - Ref: ElbSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub ${Environment}-PrivateSubnetA
        - Fn::ImportValue: !Sub ${Environment}-PrivateSubnetB
        - Fn::ImportValue: !Sub ${Environment}-PrivateSubnetC
      Tags:
        - Key: "Name"
          Value: !Join ["", [
            !Ref "AWS::StackName",
            "-LoadBalancer"]]
  
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: AdminAutoScalingGroup
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: True
    CreationPolicy: 
      ResourceSignal: 
        Count: !Ref DesiredInstanceCount
        Timeout: "PT30M"
      AutoScalingCreationPolicy: 
        MinSuccessfulInstancesPercent: 100
    Properties:  
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: !Ref MinimumInstanceCount
      DesiredCapacity: !Ref DesiredInstanceCount
      MaxSize: !Ref MaximumInstanceCount
      LoadBalancerNames:
        - !Ref LoadBalancer
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${Environment}-PrivateSubnetA
        - Fn::ImportValue: !Sub ${Environment}-PrivateSubnetB
        - Fn::ImportValue: !Sub ${Environment}-PrivateSubnetC
      Tags:
        - Key: "telstra:application:cluster:size"
          Value: !Ref DesiredInstanceCount
          PropagateAtLaunch: true
        - Key: "telstra:application:version"
          Value: !Ref DeploymentVersion
          PropagateAtLaunch: true
        - Key: "telstra:application:cluster:id"
          Value: !Ref DeploymentId
          PropagateAtLaunch: true
        - Key: "telstra:application"
          Value: !FindInMap [Constants, Tags, Application]
          PropagateAtLaunch: true
        - Key: "Name"
          Value: !Join ["", [
            !Ref "AWS::StackName",
            "-AutoScalingGroup"]]
          PropagateAtLaunch: true

  Dns:
    Type: "AWS::Route53::RecordSet"
    Properties:
      ResourceRecords:
        - !GetAtt LoadBalancer.DNSName
      Comment: "Alias record for My-Service v1 loadbalancer"
      TTL: 300
      HostedZoneId:
        Fn::ImportValue: !Sub "${Environment}-PrivateHostedZone"
      Name:
        Fn::Join:
          - "."
          - - "ms"
            - Fn::ImportValue: !Sub "${Environment}-InternalDomain"
      Type: CNAME
      
  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      # DO NOT CHANGE `GroupDescription`
      # CFN treats this as an update that requires replacement of the resource
      # and any attempt to replace these SG resources will fail as they are
      # exported from this stack and imported into the various app stacks
      # (see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html#cfn-ec2-securitygroup-groupdescription)
      GroupDescription: Allow inbound traffic on Ping Federate EC2
      VpcId: !Ref VpcId
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Ec2SecurityGroup"
        - Key: "telstra:taggingVersion"
          Value: !FindInMap [Constants, Tags, TaggingVersion]
        - Key: "telstra:service"
          Value: !FindInMap [Constants, Tags, Service]
        - Key: "telstra:application"
          Value: !FindInMap [Constants, Tags, Application]
        - Key: "telstra:environment"
          Value: !Ref Environment
        - Key: "telstra:owner"
          Value: !FindInMap [Constants, Tags, Owner]
        - Key: "telstra:dataClassification"
          Value: !FindInMap [Constants, Tags, DataClassification]
        - Key: "telstra:costCentre"
          Value: !FindInMap [Constants, Tags, CostCentre]
          
  ElbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      # DO NOT CHANGE `GroupDescription`
      # CFN treats this as an update that requires replacement of the resource
      # and any attempt to replace these SG resources will fail as they are
      # exported from this stack and imported into the various app stacks
      # (see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html#cfn-ec2-securitygroup-groupdescription)
      GroupDescription: Allow inbound traffic on Ping Federate LB
      VpcId: !Ref VpcId
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-ElbSecurityGroup"
        - Key: "telstra:taggingVersion"
          Value: !FindInMap [Constants, Tags, TaggingVersion]
        - Key: "telstra:service"
          Value: !FindInMap [Constants, Tags, Service]
        - Key: "telstra:application"
          Value: !FindInMap [Constants, Tags, Application]
        - Key: "telstra:environment"
          Value: !Ref Environment
        - Key: "telstra:owner"
          Value: !FindInMap [Constants, Tags, Owner]
        - Key: "telstra:dataClassification"
          Value: !FindInMap [Constants, Tags, DataClassification]
        - Key: "telstra:costCentre"
          Value: !FindInMap [Constants, Tags, CostCentre]
